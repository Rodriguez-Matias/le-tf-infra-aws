---
- name: Provision Jenkins Vault Instance
  hosts:
# PLEASE MAINTAIN THE LINES COMMENTED WHEN COMMITING / PUSHING TO THE REPO
#    - localhost
    - ec2_jenkinsvault_bb_infra_deployer
  gather_facts: true
  become: yes

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
  vars_files:
    - ./group_vars/all.yml

  pre_tasks:

    - command: apt-get clean
      become: yes

    - apt_repository:
        repo: 'ppa:ansible/ansible'

    - name: GET certs from S3 and unzip them & create nginx root dir for devops-dashboard
      block:

      # Installing block pre-reqs 1
      - apt: pkg="{{ item }}" update_cache=yes cache_valid_time=86400 state=present
        with_items:
        - unzip
        when: ansible_os_family == "Debian"

      # Installing block pre-reqs 2
      - pip:
          name: "{{item}}"
        with_items:
        - boto
        - boto3

      - aws_s3:
          bucket: nubi-shared-files
          object: "/sr/{{ item.service_name }}/ssl_certs_server/{{ item.nginx_server_name }}.zip"
          dest: "/etc/ssl/private/{{ item.nginx_server_name }}.zip"
          mode: get
        with_items:
          - { nginx_server_name: "{{nginx_server_name_1}}", service_name: "{{service_1}}" }

      - shell: "unzip -o -P {{ ssl_certs_zip_pass }} /etc/ssl/private/{{ item }}.zip -d /etc/ssl/private/"
        with_items:
          - "{{nginx_server_name_1}}"

      - shell: "cd /etc/ssl/private/{{ item }} && ls |grep -Eo '[2-999]{1,3}.pem$'|cut -d'.' -f1|sort|uniq|tail -1"
        register: command_output_1
        with_items:
        - "{{nginx_server_name_1}}"

      - set_fact:
          ssl_cert_ver_1: "{{ command_output_1.results[0].stdout }}"
      - debug: msg="ssl_cert_ver_1 {{ ssl_cert_ver_1 }}"

      - shell: "cd /etc/ssl/private/{{ item.cert_path }} && rename -f 's/{{ item.ssl_cert_ver }}.pem/1.pem/g' *"
        with_items:
        - { cert_path: "{{nginx_server_name_1}}", ssl_cert_ver: "{{ ssl_cert_ver_1 }}" }
        when: item.ssl_cert_ver|int >=2

      tags: nginx
      when: nginx_proxy_install == True

  roles:
    - role: common
      tags: common_tasks

  #=====================================#
  #      USER MGMT & SECURITY           #
  #=====================================#
    - role: users
      when: role_users_enabled == True
      tags: security-users

    - role: geerlingguy.security
      # The port through which you'd like SSH to be accessible. The default is port 22, but if you're operating a server
      # on the open internet, and have no firewall blocking access to port 22, you'll quickly find that thousands of
      # login attempts per day are not uncommon. You can change the port to a nonstandard port (e.g. 2849) if you want
      # to avoid these thousands of automated penetration attempts.
      security_ssh_port: 22
      security_ssh_password_authentication: "no"
      security_ssh_permit_root_login: "no"
      security_ssh_usedns: "no"
      security_sudoers_passwordless: []
      # Whether to install/enable yum-cron (RedHat-based systems) or unattended-upgrades (Debian-based systems).
      # System restarts will not happen automatically in any case, and automatic upgrades are no excuse for sloppy
      # patch and package management, but automatic updates can be helpful as yet another security measure.
      security_autoupdate_enabled: false
      security_autoupdate_reboot: false
      security_autoupdate_reboot_time: "03:00"
      security_fail2ban_enabled: false
      tags: security-server

    - role: oefenweb.fail2ban
      # fail2ban_loglevel: "{{ 'INFO' if (ansible_distribution == 'Ubuntu' and ansible_distribution_version is
      # version('16.04', '>=') or ansible_distribution == 'Debian' and ansible_distribution_version is
      # version('9.0', '>=')) else 3 }}"
      fail2ban_loglevel: 'INFO'
      fail2ban_logtarget: /var/log/fail2ban.log
      fail2ban_syslog_target: /var/log/fail2ban.log
      fail2ban_syslog_facility: 1
      fail2ban_socket: /var/run/fail2ban/fail2ban.sock
      fail2ban_pidfile: /var/run/fail2ban/fail2ban.pid
      fail2ban_dbpurgeage: 86400

      fail2ban_sendername: 'Fail2ban'
      fail2ban_ignoreips:
      - 127.0.0.1/8
      fail2ban_bantime: 600
      fail2ban_maxretry: 3
      fail2ban_findtime: 600
      fail2ban_backend: auto
      fail2ban_destemail: info@binbash.com.ar
      fail2ban_banaction: iptables-multiport
      fail2ban_mta: sendmail
      fail2ban_protocol: tcp
      fail2ban_chain: INPUT
      fail2ban_action: '%(action_)s'

      # - name: "{{ 'sshd' if (ansible_distribution == 'Ubuntu' and ansible_distribution_version is
      # version('16.04', '>=') or ansible_distribution == 'Debian' and ansible_distribution_version is
      # version('9.0', '>=')) else 'ssh' }}"
      fail2ban_services:
      - name: sshd
        port: 22
        maxretry: 5
        bantime: -1
      tags: security-fail2ban

  #=====================================#
  #      MON: PROMETHEUS NODE EXPORTER  #
  #=====================================#
  #Prometheus exporter for hardware and OS metrics exposed by
  #*NIX kernels, written in Go with pluggable metric collectors.
    - role: cloudalchemy.node-exporter
      node_exporter_version: 0.17.0
      node_exporter_web_listen_address: "0.0.0.0:9100"
      node_exporter_textfile_dir: "/var/lib/node_exporter"
      node_exporter_enabled_collectors: [ conntrack, diskstats, entropy, filefd, filesystem, hwmon, loadavg, mdadm,
                                          meminfo, netdev, netstat, stat, textfile, time, vmstat, systemd]
      when: role_prometheus_node_exporter_enabled == True
      tags: prometheus-node-exporter

    #===================#
    #      DOCKER       #
    #===================#
    # The docker_edition should be either ce (Community Edition) or ee (Enterprise Edition). You can also specify a
    # specific version of Docker to install using the distribution-specific format:
    # Red Hat/CentOS: docker-{{ docker_edition }}-<VERSION>; Debian/Ubuntu: docker-{{ docker_edition }}=<VERSION>
    # Releases can be find at: https://docs.docker.com/v17.12/release-notes/docker-ce/
    # Releases (usable): https://download.docker.com/linux/ubuntu/dists/xenial/stable/binary-amd64/Packages
    # Consider: https://github.com/geerlingguy/ansible-role-docker/issues/45
    - role: geerlingguy.docker
      docker_edition: 'ce'

      #docker_package: "docker-{{ docker_edition }}=18.06.0~ce~3-0~ubuntu"
      #docker_package: "docker-{{ docker_edition }}=18.06.0~{{docker_edition}}~3-0~{{ansible_distribution|lower}}"

      #docker_package: "docker-{{ docker_edition }}=5:18.09.0~3-0~ubuntu-xenial"
      docker_package: "docker-{{ docker_edition }}=5:18.09.0~3-0~{{ansible_distribution|lower}}-{{ ansible_distribution_release }}"
      docker_package_state: present
      docker_install_compose: true
      docker_compose_version: "1.22.0"
      docker_compose_path: /usr/local/bin/docker-compose
      docker_apt_release_channel: stable
      docker_apt_repository: "deb https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
      tags: docker

    - role: oefenweb.docker_machine
      docker_machine_version: v0.16.1
      docker_machine_install_prefix: /usr/local/bin
      docker_machine_download_url: https://github.com
      tags: docker-machine

    - role: oefenweb.fail2ban
      fail2ban_services:
      - name: sshd
        port: 22
        maxretry: 5
        bantime: -1
      tags: fail2ban


    - role: jdauphant.nginx
      nginx_ppa_use: true
      nginx_snippets:
        ssl:
         - ssl_session_cache shared:SSL:50m
         - ssl_session_tickets off
         - ssl_session_timeout 1d
         - ssl_protocols TLSv1.2
         - ssl_ciphers EECDH+AESGCM:EECDH+AES
         - ssl_ecdh_curve secp384r1
         - ssl_prefer_server_ciphers on
         - ssl_stapling on
         - ssl_stapling_verify on
         - add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload"
         - add_header X-Frame-Options DENY
         - add_header X-Content-Type-Options nosniff
      nginx_configs:
        upstream:
           - upstream {{service_1}} { server localhost:9090 weight=10; }
        gzip:
           - gzip on
           - gzip_disable msie6

    - role: jdauphant.nginx
      nginx_ppa_use: true
      nginx_snippets:
        ssl:
         - ssl_session_cache shared:SSL:50m
         - ssl_session_tickets off
         - ssl_session_timeout 1d
         - ssl_protocols TLSv1.2
         - ssl_ciphers EECDH+AESGCM:EECDH+AES
         - ssl_ecdh_curve secp384r1
         - ssl_prefer_server_ciphers on
         - ssl_stapling on
         - ssl_stapling_verify on
         - add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload"
         - add_header X-Frame-Options DENY
         - add_header X-Content-Type-Options nosniff
      nginx_configs:
        upstream:
           - upstream {{service_1}} { server localhost:{{ service_1_port }} weight=10; }
        gzip:
           - gzip on
           - gzip_disable msie6
      nginx_sites:
        service_1:
          - listen 443 ssl
          - server_name {{nginx_server_name_1}}
          - ssl_certificate /etc/ssl/private/{{nginx_server_name_1}}/fullchain1.pem
          - ssl_certificate_key /etc/ssl/private/{{nginx_server_name_1}}/privkey1.pem
          - ssl_trusted_certificate /etc/ssl/private/{{nginx_server_name_1}}/fullchain1.pem
          - include /etc/nginx/snippets/ssl.conf
          - |
            location / {
              proxy_set_header        Host $host:$server_port;
              proxy_set_header        X-Real-IP $remote_addr;
              proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header        X-Forwarded-Proto $scheme;
              proxy_redirect http:// https://;
              proxy_pass              http://{{ service_1 }};
            }
        service_1_http:
          - listen 80
          - server_name {{nginx_server_name_1}}
          - return 301 https://{{nginx_server_name_1}}$request_uri
      tags: nginx
      when: nginx_proxy_install == True


    - role: geerlingguy.jenkins
      # The state of the jenkins package install.
      # By default this role installs Jenkins but will not upgrade Jenkins (when using package-based installs).
      # If you want to always update to the latest version, change this to latest.
      jenkins_package_state: present
      jenkins_version: "2.155"
      jenkins_pkg_url: "http://pkg.jenkins-ci.org/debian/binary/"
      jenkins_connection_delay: 5
      jenkins_connection_retries: 10
      jenkins_hostname: localhost
      jenkins_admin_username: admin
      jenkins_admin_password: "{{ jenkins_admin_pass }}"
      jenkins_http_port: 8080
      jenkins_home: /var/lib/jenkins
      jenkins_jar_location: /opt/jenkins-cli.jar
      jenkins_plugins_state: present
      jenkins_plugins:
        - ace-editor
        - amazon-ecr
        - amazon-ecs
        - analysis-core
        - ansible
        - ant
        - antisamy-markup-formatter
        - apache-httpcomponents-client-4-api
        - authentication-tokens
        - aws-codepipeline
        - aws-credentials
        - aws-java-sdk
        - bitbucket-pullrequest-builder
        - bouncycastle-api
        - branch-api
        - build-blocker-plugin
        - build-pipeline-plugin
        - checkstyle
        - cloudbees-folder
        - command-launcher
        - conditional-buildstep
        - credentials
        - credentials-binding
        - dependency-check-jenkins-plugin
        - dependency-track
        - discard-old-build
        - disk-usage
        - display-url-api
        - docker-commons
        - docker-workflow
        - durable-task
        - external-monitor-job
        - generic-webhook-trigger
        - git
        - git-client
        - git-server
        - gitlab-plugin
        - handlebars
        - hashicorp-vault-plugin
        - htmlpublisher
        - icon-shim
        - jackson2-api
        - javadoc
        - jdk-tool
        - jquery
        - jquery-detached
        - jsch
        - junit
        - last-changes
        - ldap
        - mailer
        - mapdb-api
        - matrix-auth
        - matrix-project
        - maven-plugin
        - momentjs
        - nvm-wrapper
        - pam-auth
        - parameterized-scheduler
        - parameterized-trigger
        - pipeline-aws
        - pipeline-build-step
        - pipeline-graph-analysis
        - pipeline-input-step
        - pipeline-milestone-step
        - pipeline-model-api
        - pipeline-rest-api
        - pipeline-stage-step
        - pipeline-stage-tags-metadata
        - pipeline-stage-view
        - pipeline-utility-steps
        - plain-credentials
        - resource-disposer
        - role-strategy
        - run-condition
        - scm-api
        - script-security
        - slack
        - ssh-credentials
        - structs
        - subversion
        - token-macro
        - windows-slaves
        - workflow-api
        - workflow-basic-steps
        - workflow-cps
        - workflow-cps-global-lib
        - workflow-durable-task-step
        - workflow-job
        - workflow-multibranch
        - workflow-scm-step
        - workflow-step-api
        - workflow-support
        - ws-cleanup
      when: jenkins_update == True
      tags: jenkins


  post_tasks:

    - name: Adding Jenkins user to sudo group
      user:
        name: jenkins
        groups:
          - sudo
          - docker
        append: yes
      tags: jenkins_user

    - name: Create directory for jenkins docker ecr config.
      file:
        path: /opt/ecr/passwords
        owner: root
        group: root
        state: directory
        mode: 0755
      tags: ecr_config

    - name: Copy ecr_token.yml config file
      copy:
        src: files/ecr-config.yml
        dest: /root/ecr-config.yml
        owner: root
        group: root
        mode: 0644
      tags: ecr_config

    - name: ecr-token-refresh container
      #      shell: docker run --restart always -d -v /opt/ecr/passwords:/opt/passwords -v /root/ecr-config.yml:/opt/config/ecr-token-refresh/config.yaml quay.io/skuid/ecr-token-refresh:latest
      docker_container:
        name: ecr-token-refresh
        image: quay.io/skuid/ecr-token-refresh:latest
        state: started
        restart_policy: always
        volumes:
        - /opt/ecr/passwords:/opt/passwords
        - /root/ecr-config.yml:/opt/config/ecr-token-refresh/config.yaml
      tags: ecr_token_cont

    - name: Set jenkins authorized key taken from file
      authorized_key:
        user: jenkins
        state: present
        key: "{{ lookup('file', 'roles/users/files/id_rsa_jenkins.pub') }}"
        path: /var/lib/jenkins/.ssh/authorized_keys
      tags: credentials

    - service:
        name: nginx
        state: restarted
      tags: nginx
